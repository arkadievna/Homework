// Напишите программу, которая принимает на вход координаты двух точек и находит расстояние между ними в 3D пространстве.
// A (3,6,8); B (2,1,-7), -> 15.84
// A (7,-5, 0); B (1,-1,9) -> 11.53

Console.WriteLine("Введите координаты первой точки: ");
Console.Write("x1: ");
double x1 = Double.Parse(Console.ReadLine());
Console.Write("y1: ");
double y1 = Double.Parse(Console.ReadLine());
Console.Write("z1: ");
double z1 = Double.Parse(Console.ReadLine());

Console.WriteLine("Введите координаты второй точки: ");
Console.Write("x2: ");
double x2 = Double.Parse(Console.ReadLine());
Console.Write("y2: ");
double y2 = Double.Parse(Console.ReadLine());
Console.Write("z2: ");
double z2 = Double.Parse(Console.ReadLine());

double distance = Math.Sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1) + (z2 - z1) * (z2 - z1));
Console.WriteLine($"Расстояние между точками ({x1}, {y1}, {z1}) и ({x2}, {y2}, {z2}): {distance}");

// Double.Parse() - это метод класса Double, который преобразует строку в представление типа double. 
// Например, есть строка "3.14", можно использовать Double.Parse("3.14") для преобразования этой строки 
// в число типа double со значением 3.14. 
// Если строка не может быть преобразована в число, вызывается ошибка формата. 
// Переменная типа double - это переменная, которая может хранить числа с плавающей запятой двойной точности 
// (двойной точности - потому что она занимает в два раза больше места в памяти, чем float). 
// Переменная типа double может хранить как целые, так и нецелые числа со знаком или без. 
// В C# тип double определен как "System.Double". 
// Например, следующее определение переменной создает переменную типа double с именем "myDouble": 
// double myDouble = 3.14;
// Double - это класс в C#, который представляет 64-битное число с плавающей точкой двойной точности 
// (от -1,79769313486232E308 до 1,79769313486232E308). 
// Класс Double может использоваться для хранения и обработки больших чисел с плавающей точкой, 
// которые могут быть слишком большими для типа float.

// Math.Sqrt - это метод класса Math в языке C#, который возвращает квадратный корень из числа.

// есть две точки: A(x1, y1, z1) и B(x2, y2, z2)
// расстояние между этими точками можно вычислить по формуле:
// distance = sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1) + (z2 - z1) * (z2 - z1))

// функция sqrt используется для нахождения квадратного корня из числа 
// если число положительное, то функция вернет положительное значение квадратного корня

// sqrt = Math.Sqrt

// {x1}, {y1}, {z1} - координаты точки 1
// {x2}, {y2}, {z2} - координаты точки 2
// {distance} - расстояние между точками 1 и 2

// Текст в фигурных скобках - это специальные маркеры, 
// позволяющие вставлять значения переменных в текст. 
// Результатом форматирования будет строка, 
// в которой маркеры заменены на соответствующие значения переменных. 
// Например, если значения координат точки 1 равны 1, 2, 3, 
// а значения координат точки 2 равны 4, 5, 6, 
// а расстояние между ними равно 5, 
// то результат выполнения этой строки будет: "(1, 2, 3) и (4, 5, 6): 5".

// Знак $ в строке используется для интерполяции* строковых литералов* 
// и вычисления выражений внутри них. 
// Он позволяет вставлять значения переменных 
// или результаты выражений непосредственно в строковый литерал, 
// обрамляя текущий код знаками фигурных скобок.

// *Интерполяция - это возможность динамически формировать строки, 
// вставляя в них значения переменных. 
// В языке C# для интерполяции строк используется специальный символ $, 
// затем в фигурных скобках указываются значения переменных. 
// Такой способ позволяет упростить и ускорить процесс формирования строк.
// Например:
// string name = "John";
// int age = 30;
// Console.WriteLine($"My name is {name} and I'm {age} years old.");
// Будет выведено: 
// My name is John and I'm 30 years old.

// *Строковые литералы (string literals) - это последовательности символов в двойных кавычках, 
// такие как "Hello, World!". Они используются для создания строк в программировании. 